version: '3.9'

services:
  db:
    image: postgres:13-alpine
    volumes:
      - ./pg_data:/var/lib/postgresql/data
    environment:
       POSTGRES_HOST: ${DB_HOST}
       POSTGRES_USER: ${DB_USER}
       POSTGRES_PASSWORD: ${DB_PASSWORD}
       POSTGRES_DB: ${DB_NAME}
       SOCIAL_AUTH_VK_OAUTH2_KEY: ${{VK_OAUTH2_KEY}}
       SOCIAL_AUTH_VK_OAUTH2_SECRET: ${{VK_OAUTH2_SECRET}}

    restart: on-failure

    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}" ]
      interval: 5s
      timeout: 5s
      retries: 5

  front:
    image: sermalenk/skypro-front:lesson-34
    ports:
      - "80:80"
    depends_on:
      db:
        condition: service_healthy

#  bot:
#    image: trevor5f/todolist:$GITHUB_REF_NAME-$GITHUB_RUN_ID
#    depends_on:
#      migrations:
#        condition: service_completed_successfully
#      postgres:
#        condition: service_healthy
#    env_file:
#      - ./.env
#    networks:
#      - todolist
#    command: >
#      sh -c "python manage.py runbot"

  migrations:
    image: trevor5f/todolist_project:$GITHUB_REF_NAME-$GITHUB_RUN_ID
    environment:
      DB_NAME: ${DB_NAME}
      DB_USER: ${DB_USER}
      DB_HOST: ${DB_HOST}
      DB_PASSWORD: ${DB_PASSWORD}
      SECRET_KEY: ${SECRET_KEY}
      SOCIAL_AUTH_VK_OAUTH2_KEY: ${{VK_OAUTH2_KEY}}
      SOCIAL_AUTH_VK_OAUTH2_SECRET: ${{VK_OAUTH2_SECRET}}
    depends_on:
      db:
        condition: service_healthy
    command: >
      sh -c "python manage.py migrate"


  api:
    image: trevor5f/todolist_project:$GITHUB_REF_NAME-$GITHUB_RUN_ID
    environment:
      DB_NAME: ${DB_NAME}
      DB_USER: ${DB_USER}
      DB_HOST: ${DB_HOST}
      DB_PASSWORD: ${DB_PASSWORD}
      SECRET_KEY: ${SECRET_KEY}
      SOCIAL_AUTH_VK_OAUTH2_KEY: ${{VK_OAUTH2_KEY}}
      SOCIAL_AUTH_VK_OAUTH2_SECRET: ${{VK_OAUTH2_SECRET}}
    depends_on:
      db:
        condition: service_healthy
      migrations:
        condition: service_completed_successfully
    ports:
      - "8000:8000"


volumes:
  pg_data: